package com.as.cb.Util;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import de.l3s.boilerpipe.BoilerpipeProcessingException;
import de.l3s.boilerpipe.extractors.ArticleExtractor;
import de.l3s.boilerpipe.extractors.LargestContentExtractor;

public class BoilerPipeParser {
    public static void main(String args[]) throws IOException {
	// Below is output of raw field
	String encoded = "";
	System.out.println(extractEncodedString(encoded, null));
    }
    public static String extractByteArray(byte[] byteArray, String type) {
   	String result = "";
   	
   	String htmlStr = new String(byteArray);
   	try {
   	    if ("LargestContentExtractor".equals(type))
   		result = LargestContentExtractor.INSTANCE.getText(htmlStr);
   	    else
   		result = ArticleExtractor.INSTANCE.getText(htmlStr);
   	} catch (BoilerpipeProcessingException e) {
   	    e.printStackTrace();
   	}
   	return result;
       }
    
    public static String extractEncodedString(String encodedStr, String type) {
	byte[] decodedBytes = Base64.getDecoder().decode(encodedStr);
	return extractByteArray(decodedBytes,type);
    }
}
